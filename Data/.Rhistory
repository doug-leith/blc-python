install.packages('ISLR')
library(ISLR)
Wage
c
clc
clear
q()
x<-c(1,3,2,5)
x
x=c(1,6,2)
x
y=c(1,4,3)
?Wage
length(x)
length(y)
x+y
ls)
ls()
rm(x,y)
ls()
rm(list=ls())
list=ls()
list
x=c(1,2,3)
y=c(2,3,4)
rm(ls())
rm(z=ls())
list
z
rm(list=ls())
?matrix
ls9)
ls()
x=matrix(data=c(1,2,3,4),nrow=2,ncol=2)
x
?rm
x=matrix(c(1,2,3,4),2,2)
x=matrix(c(1,2,3,4),2,2,byrow=true)
x=matrix(c(1,2,3,4),2,2,byrow=TRUE)
x
?matrix
matrix(c(1,2,3,4),2,2,byrow=TRUE)
x=matrix(c(1,2,3,4),2,2)
sqrt(x)
x^2
?sqr
?sqrt
?rnorm
?rnorm
rnorm(5)
rnorm(5)
rnorm(5)
ls(
)
rm(x)
x=rnorm(50)
y=x+rnorm(50,mean=50,sd=.1)
cor(x,y)
set.seed(1303)
rnorm(50)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
sd(y)==sqrt(var(y))
.
ans
x=rnorm(100);
y=rnorm(100);x
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis",main="Plot of X vs Y")
pdf("Figure.pdf")
plot(x,y,col="green")
dev.off()
pdf("Figure.pdf")
plot(x,col="red")
plot(y,col="blue")
dev.off()
plot(x,col="red")
seq(2,6)
3:11
x=seq(1,10);x
x=1:10;x
x=seq(-pi,pi,length=50)
x
?seq
y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
?contour
contour(x,y,f,nlevels=45,add=F)
contour(x,y,f,nlevels=45,add=F,col="blue")
contour(x,y,f,add=T)
?plot
T
F
fa=(f-t(f))/2
contour(x,y,fa,nlevels=15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
persp(x,y,fa,theta=30,phi=0)
ls()
rm(list=ls())
A=matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[,]
A[1,]
A[,1]
A[-c(1,3),]
dim(A)
Auto=read.table("Auto.data")
library(ISLR)
Auto=read.table("Auto.data")
getwd()
Auto=read.table("Auto.data")
?fix
fix(Auto)
Auto=read.table("Auto.data",header=T)
fix(Auto)
Auto=read.table("Auto.data",header=T,nastrings="?")
Auto=read.table("Auto.data",header=T,na.strings="?")
fix(Auto)
Auto=read.csv("Auto.csv",header=T,na.strings="?")
fix(Auto)
dim(Auto)
Auto[1:4,]
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
plot(Auto$cylinders,Auto$mpg)
attach(Auto)
dim(cylinders)
plot(cylinders,mpg)
?as.factor()
q()
1+1
library(dplyr)
?mutate
citation()
citation("ISLR")
citation("tidyr")
citation("dplyr")
rm(list=ls())
getwd()
setwd("Cáipéisí")
list.files()
setwd("..")
list.files()
t <- read.csv("times.csv")
class(t)
strsplit(t)
strsplit(t,":")
names(t)
t <- read.csv("times.csv", header=F)
names(t)
strsplit(t$V1,":")
as.character(t)
head(t)
as.character(t$V1)
strsplit(as.character(t$V1), ":")
library(tidyr)
?manipulate
?mutate
?tidyr
spread?
)
?spread
?separate
t <- separate(t, c("m","s"), sep=":")
t <- separate(t, col=V1, into = c("m","s"), sep=":")
t
mutate(t, sec = 60*m+s)
?mutate
library(dplyr)
mutate(t, sec = 60*m+s)
str(t)
as.numeric(t)
as.numeric(t$m)
t$m <- as.numerit(t$m)
t$m <- as.numeric(t$m)
t$m
as.numeric(t$s)
t$s <- as.numeric(t$s)
mutate(t, sec = 60*m+s)
t <- mutate(t, sec = 60*m+s)
hist(t$sec)
?hist
hist(t$sec, breaks = 20)
hist(t$sec/60, breaks = 20)
hist(t$sec/60, breaks = 15)
hist(t$sec/60, breaks = 10)
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
?Boston
lm.fit=lm(medv~lstat,data=Boston)
attach(Boston)
lm.fit
names(lm.fit)
summary(lm.fit)
lm.fit$residuals
summary(lm.fit)
coef(lm.fit)
confint(lm.fit)
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,col="red")
plot(lstat,medv,pch=20)
plot(lstat,medv,pch="+")
plot(1:20,1:20,pch=1:20)
plot(lstat,medv,pch=20)
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
iris
install.packages("ggvis")
library(ggvis)
iris %>% ggvis(~Sepal.Width, ~Sepal.Length, fill = ~Species, size = ~Petal.Width) %>% layer_points()
iris %>% ggvis(~Sepal.Width, ~Sepal.Length, fill := "Red", size = ~Petal.Width) %>% layer_points()
toInteger(2.4)
tasinteger(2.5)
tointeger(2.5)
as.integer(2.5)
setwd("/home/naoise/Cáipéisí/Maynooth/Postdoc/Data")
cc <- c("integer", "integer", "numeric", "NULL")
movieRatings <- read.csv("ratings.csv", header=T, nrows=10000, colClasses=cc)
movieRatings[,"rating"] <- as.integer(2*movieRatings[,"rating"])
str(movieRatings)
library(tidyr)
head(movieRatings)
tail(movieRatings)
summarise(movieRatings)
summary(movieRatings)
table(movieRatings[,"userId"])
as.data.frame()table(movieRatings[,"userId"])
as.data.frame(table(movieRatings[,"userId"]))
as.data.frame(table(movieRatings[,"userId"]))[,"Freq"]
table(as.data.frame(table(movieRatings[,"userId"]))[,"Freq"])
as.data.frame(table(as.data.frame(table(movieRatings[,"userId"]))[,"Freq"]))
movieRatings[movieRatings[,"rating"]>9,"rating"]
length(movieRatings[movieRatings[,"rating"]>9,"rating"])
length(movieRatings[movieRatings[,"rating"]==9,"rating"])
movieRatings[movieRatings[,"rating"]==9,"rating"]
range(1,10)
range(1,10,1)
help(range)
1:10
sample(1:10,5)
sort(sample(1:10,5))
sel <- sort(sample(1:n, s))
library(tidyr)
n <- 10000 # Number of ratings to import
s <- 100 # Number of random ratings to export
setwd("/home/naoise/Cáipéisí/Maynooth/Postdoc/Data")
cc <- c("integer", "integer", "numeric", "NULL")
movieRatings <- read.csv("ratings.csv", header=T, nrows=n, colClasses=cc)
movieRatings[,"rating"] <- as.integer(2*movieRatings[,"rating"])
sel <- sort(sample(1:n, s))
movieRatings[sel,"rating"]
sel <- sort(sample(1:n, s)) # Select which ratings to be used
write(movieRatings[sel, "rating"], "rating.csv")
write(movieRatings[sel, "rating"], "rating.csv", ncolumns=s)
str(movieRatings)
write(movieRatings[sel, "rating"], "ratings.txt", ncolumns=s)
write(movieRatings[sel, "userId"], "users.txt", ncolumns=s)
write(movieRatings[sel, "movieId"], "movies.txt", ncolumns=s)
i=1
i+=1
i=i+1
i
help(for)
movieRatings[,"rating"]>9
sum(movieRatings[,"rating"]>9)
str(movieRatings)
colnames(tmovieRatings) <- c("user", "movie", "rating")
clear
rm(list=ls())
library(tidyr)
n <- 10 # Number of ratings to import
s <- 5 # Number of random ratings to export
# Retrieve raw ratings from csv
setwd("/home/naoise/Cáipéisí/Maynooth/Postdoc/Data")
cc <- c("integer", "integer", "numeric", "NULL")
tmovieRatings <- read.csv("raw_ratings.csv", header=T, nrows=n, colClasses=cc)
colnames(tmovieRatings) <- c("user", "movie", "rating")
# Select which ratings to be used
sel <- sort(sample(1:n, s))
movieRatings <- tmovieRatings[sel,]
movieRatings[,"rating"] <- as.integer(2*movieRatings[,"rating"]) # Reset ratings to integers
str(movieRatings)
id = 0
while (sum(movieRatings[,"user"] > id) > 0)
{
if (sum(movieRatings[,"user"] == id) > 0)
{
id = id+1
}
else
{
movieRatings[movieRatings[,"user"] > id,"user"] = movieRatings[movieRatings[,"user"] > id,"user"]-1
}
}
str(movieRatings)
min(movieRatings[,"user"])
min(movieRatings[movieRatings[,"movie"]>0,"movie"])
min(movieRatings[movieRatings[,"movie"]>441,"movie"])
min(movieRatings[movieRatings[,"movie"]>494,"movie"])
id = 0
while (sum(movieRatings[,"movie"] > id) > 0)
{
if (sum(movieRatings[,"movie"] == id) > 0)
{
id = id+1
}
else
{
i = min(movieRatings[movieRatings[,"movie"]>id, "movie"])
movieRatings[movieRatings[,"movie"] > id,"movie"] = movieRatings[movieRatings[,"movie"] > id,"movie"]-i-id
}
}
str(movieRatings)
library(tidyr)
n <- 10 # Number of ratings to import
s <- 5 # Number of random ratings to export
# Retrieve raw ratings from csv
setwd("/home/naoise/Cáipéisí/Maynooth/Postdoc/Data")
cc <- c("integer", "integer", "numeric", "NULL")
tmovieRatings <- read.csv("raw_ratings.csv", header=T, nrows=n, colClasses=cc)
colnames(tmovieRatings) <- c("user", "movie", "rating")
# Select which ratings to be used
sel <- sort(sample(1:n, s))
movieRatings <- tmovieRatings[sel,]
movieRatings[,"rating"] <- as.integer(2*movieRatings[,"rating"]) # Reset ratings to integers
id=0
sum(movieRatings[,"movie"]==id)>0
min(movieRatings[movieRatings[,"movie"]>id,"movie"])
str(movieRatings)
movieRatings[movieRatings[,"movie"] > id,"movie"]-i-id
movieRatings[movieRatings[,"movie"] > id,"movie"]
movieRatings[movieRatings[,"movie"] > id,"movie"]-172
movieRatings[movieRatings[,"movie"] > id,"movie"] = movieRatings[movieRatings[,"movie"] > id,"movie"]-172
str(movieRatings)
id = id+1
sum(movieRatings[,"movie"] == id) > 0
i = min(movieRatings[movieRatings[,"movie"]>id, "movie"])
movieRatings[movieRatings[,"movie"] > id,"movie"]-i-id
movieRatings[movieRatings[,"movie"] > id,"movie"]-i+id
movieRatings[movieRatings[,"movie"] > id,"movie"] = movieRatings[movieRatings[,"movie"] > id,"movie"]-i+id
movieRatings[movieRatings[,"movie"] > id,"movie"] = movieRatings[movieRatings[,"movie"] > id,"movie"]-i+id
str(movieRatings)
id = id+1
sum(movieRatings[,"movie"] == id) > 0
i = min(movieRatings[movieRatings[,"movie"]>id, "movie"])
movieRatings[movieRatings[,"movie"] > id,"movie"]-i+id
movieRatings[movieRatings[,"movie"] > id,"movie"] = movieRatings[movieRatings[,"movie"] > id,"movie"]-i+id
str(movieRatings)
sum(movieRatings[,"movie"] > id) > 0
while (sum(movieRatings[,"movie"] > id) > 0)
{
if (sum(movieRatings[,"movie"] == id) == 0)
{
i = min(movieRatings[movieRatings[,"movie"]>id, "movie"])
movieRatings[movieRatings[,"movie"] > id,"movie"] = movieRatings[movieRatings[,"movie"] > id,"movie"]-i+id
}
id = id+1
}
str(movieRatings)
s <- 1000 # Number of random ratings to export
data.r
s <- 1000 # Number of random ratings to export
source('~/Cáipéisí/Maynooth/Postdoc/Data/data.r', echo=TRUE)
str(movieRatings)
table(movieRatings[,"movie"])
sum(movieRatings[,"movie"])
length(movieRatings[,"movie"])
table(movieRatings[,"user"])
max(movieRatings[,"user"])
s/max(movieRatings[,"user"])/max(movieRatings[,"movie"])
source('~/Cáipéisí/Maynooth/Postdoc/Data/data.r', echo=TRUE)
write(movieRatings[sel, "rating"], "ratings.txt", ncolumns=s)
write(movieRatings[sel, "userId"], "users.txt", ncolumns=s)
write(movieRatings[sel, "movieId"], "movies.txt", ncolumns=s)
write(movieRatings[, "rating"], "ratings.txt", ncolumns=s)
write(movieRatings[, "user"], "users.txt", ncolumns=s)
write(movieRatings[, "movie"], "movies.txt", ncolumns=s)
s/max(movieRatings[,"user"])/max(movieRatings[,"movie"])
table(movieRatings[,"user"])
length(table(movieRatings[,"user"]))
length(table(tmovieRatings[,"user"]))
"Data Imported"
cat("Data Imported")
cat("Data Imported\n")
cat("Data Imported\n")
cat("Serionsly, it's all done")
cat("I don't believe you")
20000/8840/4789
200000/21451/11462
as.data.frame(table(movieRatings[,"user"]))
str(as.data.frame(table(movieRatings[,"user"])))
str(as.data.frame(table(movieRatings[,"user"]))["Var1"])
as.data.frame(table(movieRatings[,"user"]))["Var1",1:1000]
as.data.frame(table(movieRatings[,"user"]))[1:100,"Var1"]
T && T
removeUsers = movieRatings[,"user"] < 1000
sum(removeUsers)
length(removeUsers)
